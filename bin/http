#!/usr/bin/python3 -SIBbb
from __future__ import print_function, unicode_literals # keep flycheck happy

import os
import sys

is_root=os.getuid() == 0
snap=os.getenv("SNAP")
if snap:
    os.chdir(snap)
else:
    # if is_root:
    #     print("refusing to run unconfined as root.", file=sys.stderr)
    #     sys.exit(1)
    os.chdir(os.path.realpath(os.path.dirname(os.path.dirname(__file__))))

had_traceback = False
snapd_idx = -2
# XXX: hackish
for i, x in enumerate(sys.argv):
    if x=="--help" and os.path.exists("README"):
        os.execv("./bin/man", ("man",))

    if x=="--traceback":
        had_traceback = True

    if x.startswith("snapd:///"):
        snapd_idx = i

# XXX: Switch to using httpie.context.Environment, if it works
# for this
if not had_traceback:
    sys.argv.insert(1, "--traceback")
    snapd_idx+=1

if snap:
    sys.path.append("libs")
    envkey = "SNAP_DATA" if is_root else "SNAP_USER_DATA"
    if "HTTPIE_CONFIG_DIR" not in os.environ:
        os.environ["HTTPIE_CONFIG_DIR"] = os.environ[envkey]
else:
    # maybe we're running "raw"
    from glob import iglob
    sys.path.extend(os.path.dirname(i)
                    for i in iglob("**/httpie_unixsocket.py", recursive=True))

from httpie.plugins import plugin_manager
from requests_unixsocket import DEFAULT_SCHEME
from requests.compat import urlparse, urlunparse, quote
from httpie_unixsocket import UnixSocketTransportPlugin
plugin_manager.register(UnixSocketTransportPlugin)

if snapd_idx >-1:
    scheme = urlparse(DEFAULT_SCHEME).scheme
    netloc = quote("/run/snapd.socket", safe="")

    sys.argv[snapd_idx] = urlunparse(urlparse(sys.argv[snapd_idx])._replace(scheme=scheme, netloc=netloc))

from requests import exceptions as reqexc
from requests.packages.urllib3 import exceptions as ur3exc

import httpie.core
try:
    httpie.core.main()
except Exception as e:
    if had_traceback:
        raise
    if snapd_idx >-1:
        if isinstance(e, reqexc.ConnectionError) and isinstance(e.args[0], ur3exc.ProtocolError) and isinstance(e.args[0].args[1], PermissionError):
            print("can't access snapd socket", file=sys.stderr)
            sys.exit(1)
    print(e)
    sys.exit(1)
else:
    sys.exit(0)
